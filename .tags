!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BACKSLASH	dsb3/hrjson/decoder.py	/^BACKSLASH = {$/;"	v
ESCAPE	dsb3/hrjson/encoder.py	/^ESCAPE = re.compile(r'[\\x00-\\x1f\\\\"\\b\\f\\n\\r\\t]')$/;"	v
ESCAPE_ASCII	dsb3/hrjson/encoder.py	/^ESCAPE_ASCII = re.compile(r'([\\\\"]|[^\\ -~])')$/;"	v
ESCAPE_DCT	dsb3/hrjson/encoder.py	/^ESCAPE_DCT = {$/;"	v
FLAGS	dsb3/hrjson/decoder.py	/^FLAGS = re.VERBOSE | re.MULTILINE | re.DOTALL$/;"	v
FLOAT_REPR	dsb3/hrjson/encoder.py	/^FLOAT_REPR = repr$/;"	v
GPU_ids	build/lib/dsb3/pipeline.py	/^GPU_ids = None$/;"	v
GPU_ids	dsb3/pipeline.py	/^GPU_ids = None$/;"	v
GPU_memory_fraction	build/lib/dsb3/pipeline.py	/^GPU_memory_fraction = 0.85$/;"	v
GPU_memory_fraction	dsb3/pipeline.py	/^GPU_memory_fraction = 0.85$/;"	v
HAS_UTF8	dsb3/hrjson/encoder.py	/^HAS_UTF8 = re.compile(b'[\\x80-\\xff]')$/;"	v
INFINITY	dsb3/hrjson/encoder.py	/^INFINITY = float('inf')$/;"	v
JSONArray	dsb3/hrjson/decoder.py	/^def JSONArray(s_and_end, scan_once, _w=WHITESPACE.match, _ws=WHITESPACE_STR):$/;"	f
JSONDecoder	dsb3/hrjson/decoder.py	/^class JSONDecoder(object):$/;"	c
JSONEncoder	dsb3/hrjson/encoder.py	/^class JSONEncoder(object):$/;"	c
JSONObject	dsb3/hrjson/decoder.py	/^def JSONObject(s_and_end, strict, scan_once, object_hook, object_pairs_hook,$/;"	f
LogFormatter	build/lib/dsb3/pipeline.py	/^class LogFormatter(logging.Formatter):$/;"	c
LogFormatter	dsb3/pipeline.py	/^class LogFormatter(logging.Formatter):$/;"	c
NUMBER_RE	dsb3/hrjson/scanner.py	/^NUMBER_RE = re.compile($/;"	v
NaN	dsb3/hrjson/decoder.py	/^NaN = float('nan')$/;"	v
NegInf	dsb3/hrjson/decoder.py	/^NegInf = float('-inf')$/;"	v
PosInf	dsb3/hrjson/decoder.py	/^PosInf = float('inf')$/;"	v
STRINGCHUNK	dsb3/hrjson/decoder.py	/^STRINGCHUNK = re.compile(r'(.*?)(["\\\\\\x00-\\x1f])', FLAGS)$/;"	v
WHITESPACE	dsb3/hrjson/decoder.py	/^WHITESPACE = re.compile(r'[ \\t\\n\\r]*', FLAGS)$/;"	v
WHITESPACE_STR	dsb3/hrjson/decoder.py	/^WHITESPACE_STR = ' \\t\\n\\r'$/;"	v
_CONSTANTS	dsb3/hrjson/decoder.py	/^_CONSTANTS = {$/;"	v
__all__	dsb3/hrjson/__init__.py	/^__all__ = [$/;"	v
__all__	dsb3/hrjson/decoder.py	/^__all__ = ['JSONDecoder']$/;"	v
__all__	dsb3/hrjson/scanner.py	/^__all__ = ['make_scanner']$/;"	v
__author__	dsb3/hrjson/__init__.py	/^__author__ = 'Bob Ippolito <bob@redivi.com>'$/;"	v
__init__	build/lib/dsb3/pipeline.py	/^    def __init__(self, fmt='%(levelno)s: %(msg)s', datefmt='%Y-%m-%d %H:%M', style='%', passed_time=False):$/;"	m	class:LogFormatter
__init__	dsb3/hrjson/decoder.py	/^    def __init__(self, object_hook=None, parse_float=None,$/;"	m	class:JSONDecoder
__init__	dsb3/hrjson/encoder.py	/^    def __init__(self, skipkeys=False, ensure_ascii=True,$/;"	m	class:JSONEncoder
__init__	dsb3/pipeline.py	/^    def __init__(self, fmt='%(levelname)s: %(message)s', datefmt='%Y-%m-%d %H:%M', style='%', passed_time=False):$/;"	m	class:LogFormatter
__init__	dsb3/steps/filter_candidates.py	/^    def __init__(self, num_augs_per_img, net_config, dataset_name):$/;"	m	class:score_nodules
__init__	dsb3/steps/gen_submission.py	/^    def __init__(self, num_augs_per_img, net_config, splitting):$/;"	m	class:cancer_score
__init_run	build/lib/dsb3/pipeline.py	/^__init_run = -1$/;"	v
__init_run	dsb3/pipeline.py	/^__init_run = -1$/;"	v
__run	build/lib/dsb3/pipeline.py	/^__run = 0$/;"	v
__run	dsb3/pipeline.py	/^__run = 0$/;"	v
__step	dsb3/pipeline.py	/^__step = None$/;"	v
__step_dir_suffix	dsb3/pipeline.py	/^__step_dir_suffix = ''$/;"	v
__step_name	build/lib/dsb3/pipeline.py	/^__step_name = None$/;"	v
__step_name	dsb3/pipeline.py	/^__step_name = None$/;"	v
__version__	dsb3/hrjson/__init__.py	/^__version__ = '2.0.9'$/;"	v
_add_file_handle_to_log	build/lib/dsb3/pipeline.py	/^def _add_file_handle_to_log(logger, filename, mode, level, passed_time=False):$/;"	f
_add_file_handle_to_log	dsb3/pipeline.py	/^def _add_file_handle_to_log(logger, filename, mode, level, passed_time=False):$/;"	f
_decode_uXXXX	dsb3/hrjson/decoder.py	/^def _decode_uXXXX(s, pos):$/;"	f
_default_decoder	dsb3/hrjson/__init__.py	/^_default_decoder = JSONDecoder(object_hook=None, object_pairs_hook=None)$/;"	v
_default_encoder	dsb3/hrjson/__init__.py	/^_default_encoder = JSONEncoder($/;"	v
_get_step_dir_for_load	build/lib/dsb3/pipeline.py	/^def _get_step_dir_for_load(step_name=None):$/;"	f
_get_step_dir_for_load	dsb3/pipeline.py	/^def _get_step_dir_for_load(step_name=None):$/;"	f
_init_log	build/lib/dsb3/pipeline.py	/^def _init_log(level=logging.INFO):$/;"	f
_init_log_pipe	dsb3/pipeline.py	/^def _init_log_pipe(level=logging.DEBUG):$/;"	f
_init_log_step	build/lib/dsb3/pipeline.py	/^def _init_log_step(step_name, level=logging.INFO, mode='w'):$/;"	f
_init_log_step	dsb3/pipeline.py	/^def _init_log_step(step_name, level=logging.DEBUG, mode='w'):$/;"	f
_init_patients	build/lib/dsb3/pipeline.py	/^def _init_patients():$/;"	f
_init_patients	dsb3/pipeline.py	/^def _init_patients(_n_patients=0, single_patient_id=None, fromto_patients=None):$/;"	f
_init_patients_by_label	dsb3/pipeline.py	/^def _init_patients_by_label():$/;"	f
_init_patients_by_split	dsb3/pipeline.py	/^def _init_patients_by_split(tr_va_ho_split, tr_va_ho_split_file=None):$/;"	f
_init_run	build/lib/dsb3/pipeline.py	/^def _init_run(next_step_name, run=-1, descr='', init_run=-1):$/;"	f
_init_run	dsb3/pipeline.py	/^def _init_run(run=-1, run_descr='', init_run=-1):$/;"	f
_init_step	build/lib/dsb3/pipeline.py	/^def _init_step(step_name, mode='w'):$/;"	f
_init_step	dsb3/pipeline.py	/^def _init_step(step_name, mode='w'):$/;"	f
_iterencode	dsb3/hrjson/encoder.py	/^    def _iterencode(o, _current_indent_level):$/;"	f	function:_make_iterencode
_iterencode_dict	dsb3/hrjson/encoder.py	/^    def _iterencode_dict(dct, _current_indent_level):$/;"	f	function:_make_iterencode
_iterencode_list	dsb3/hrjson/encoder.py	/^    def _iterencode_list(lst, _current_indent_level):$/;"	f	function:_make_iterencode
_make_iterencode	dsb3/hrjson/encoder.py	/^def _make_iterencode(markers, _default, _encoder, _indent, _floatstr,$/;"	f
_redirect_stdout	build/lib/dsb3/tf_tools.py	/^    def _redirect_stdout(to):$/;"	f	function:redirect_stdout
_redirect_stdout	dsb3/tf_tools.py	/^    def _redirect_stdout(to):$/;"	f	function:redirect_stdout
_run_step	build/lib/dsb3/pipeline.py	/^def _run_step(step_name, params):$/;"	f
_run_step	dsb3/pipeline.py	/^def _run_step(step_name, params):$/;"	f
_scan_once	dsb3/hrjson/scanner.py	/^    def _scan_once(string, idx):$/;"	f	function:py_make_scanner
_visualize_step	build/lib/dsb3/pipeline.py	/^def _visualize_step(step_name=None):$/;"	f
_visualize_step	dsb3/pipeline.py	/^def _visualize_step(step_name=None):$/;"	f
all_patients	dsb3/params.py	/^all_patients = False$/;"	v
all_patients	params_juler.py	/^all_patients = False$/;"	v
allow_nan	dsb3/hrjson/__init__.py	/^    allow_nan=True,$/;"	v
assets_path	dsb3/params.py	/^assets_path = '..\/dsb3a_assets\/'$/;"	v
assets_path	params_juler.py	/^assets_path = '..\/dsb3a_assets\/'$/;"	v
avail_dataset_names	build/lib/dsb3/pipeline.py	/^avail_dataset_names = ['LUNA16', 'dsb3']$/;"	v
avail_dataset_names	dsb3/pipeline.py	/^avail_dataset_names = ['LUNA16', 'dsb3']$/;"	v
avail_runs	build/lib/dsb3/pipeline.py	/^avail_runs = OrderedDict([])$/;"	v
avail_runs	dsb3/pipeline.py	/^avail_runs = OrderedDict([])$/;"	v
avail_steps	build/lib/dsb3/pipeline.py	/^avail_steps = OrderedDict([$/;"	v
avail_steps	dsb3/pipeline.py	/^avail_steps = OrderedDict([$/;"	v
c_encode_basestring_ascii	dsb3/hrjson/encoder.py	/^    c_encode_basestring_ascii = None$/;"	v
c_make_encoder	dsb3/hrjson/encoder.py	/^    c_make_encoder = None$/;"	v
c_make_scanner	dsb3/hrjson/scanner.py	/^    c_make_scanner = None$/;"	v
c_scanstring	dsb3/hrjson/decoder.py	/^    c_scanstring = None$/;"	v
cancer_score	dsb3/steps/gen_submission.py	/^class cancer_score():$/;"	c
check_circular	dsb3/hrjson/__init__.py	/^    check_circular=True,$/;"	v
clip_HU_range	build/lib/dsb3/steps/resample_lungs.py	/^def clip_HU_range(img_array, HU_tissue_range):$/;"	f
clip_HU_range	dsb3/steps/resample_lungs.py	/^def clip_HU_range(img_array, HU_tissue_range):$/;"	f
clip_HU_range_int16	build/lib/dsb3/steps/resample_lungs.py	/^def clip_HU_range_int16(img_array, HU_tissue_range):$/;"	f
clip_HU_range_int16	dsb3/steps/resample_lungs.py	/^def clip_HU_range_int16(img_array, HU_tissue_range):$/;"	f
considered_patients	dsb3/steps/gen_candidates_eval.py	/^considered_patients = None$/;"	v
crop_and_embed	dsb3/utils/__init__.py	/^def crop_and_embed(array, box_coords, cube_shape):$/;"	f
dataset_name	build/lib/dsb3/pipeline.py	/^dataset_name = None$/;"	v
dataset_name	dsb3/pipeline.py	/^dataset_name = None$/;"	v
dbscan	build/lib/dsb3/steps/gen_candidates.py	/^def dbscan(X_mm, X_px, weights, avg_n_points_per_cmm=1):$/;"	f
dbscan	dsb3/steps/gen_candidates.py	/^def dbscan(X_mm, X_px, weights, avg_n_points_per_cmm=1):$/;"	f
decode	dsb3/hrjson/decoder.py	/^    def decode(self, s, _w=WHITESPACE.match):$/;"	m	class:JSONDecoder
default	dsb3/hrjson/__init__.py	/^    default=None,$/;"	v
default	dsb3/hrjson/encoder.py	/^    def default(self, o):$/;"	m	class:JSONEncoder
dir_is_empty	dsb3/utils/__init__.py	/^def dir_is_empty(directory):$/;"	f
draw_ellipse	build/lib/dsb3/steps/gen_nodule_masks.py	/^def draw_ellipse(mask_array_zyx, color, v_center_px, v_diam_px):$/;"	f
draw_ellipses_in_layers	dsb3/steps/gen_nodule_masks.py	/^def draw_ellipses_in_layers(nodule_annotations, new_mask_array_zyx, affected_layers, z_min_px, z_max_px, bound_box_offset_zyx_px, real_spacing_zyx, origin_zyx, thickness, nodule_priority_uint8, factor=1):$/;"	f
draw_new_ellipsoid	build/lib/dsb3/steps/gen_nodule_masks.py	/^def draw_new_ellipsoid(new_mask_shape, center, radii, rotation, v_center_px, v_diam_px, color):$/;"	f
draw_new_ellipsoid	dsb3/steps/gen_nodule_masks.py	/^def draw_new_ellipsoid(new_mask_shape, center, radii, rotation, v_center_px, v_diam_px, color):$/;"	f
dump	dsb3/hrjson/__init__.py	/^def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True,$/;"	f
dumps	dsb3/hrjson/__init__.py	/^def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True,$/;"	f
encode	dsb3/hrjson/encoder.py	/^    def encode(self, o):$/;"	m	class:JSONEncoder
encode_basestring	dsb3/hrjson/encoder.py	/^def encode_basestring(s):$/;"	f
encode_basestring_ascii	dsb3/hrjson/encoder.py	/^encode_basestring_ascii = ($/;"	v
ensure_ascii	dsb3/hrjson/__init__.py	/^    ensure_ascii=True,$/;"	v
ensure_dir	dsb3/utils/__init__.py	/^def ensure_dir(f):$/;"	f
ensure_point_lst_within_array	dsb3/steps/gen_nodule_seg_data.py	/^def ensure_point_lst_within_array(lst, array_shape):$/;"	f
entry_points	setup.py	/^    entry_points={$/;"	v
errmsg	dsb3/hrjson/decoder.py	/^def errmsg(msg, doc, pos, end=None):$/;"	f
evaluate	dsb3/steps/gen_candidates_eval.py	/^def evaluate(max_n_candidates, sort_candidates_by='prob_sum_cluster', $/;"	f
filter_candidates	build/lib/dsb3/params.py	/^filter_candidates = OrderedDict([$/;"	v
filter_candidates	dsb3/params.py	/^filter_candidates = OrderedDict([$/;"	v
filter_candidates	params_alex.py	/^filter_candidates = OrderedDict([$/;"	v
filter_candidates	params_juler.py	/^filter_candidates = OrderedDict([$/;"	v
fit_ellipsoid	dsb3/steps/gen_nodule_masks.py	/^def fit_ellipsoid(mask_array_zyx, color, v_center_px, v_diam_px):$/;"	f
floatstr	dsb3/hrjson/encoder.py	/^        def floatstr(o, allow_nan=self.allow_nan,$/;"	f	function:JSONEncoder.iterencode
format	build/lib/dsb3/pipeline.py	/^    def format(self, record):$/;"	m	class:LogFormatter
format	dsb3/pipeline.py	/^    def format(self, record):$/;"	m	class:LogFormatter
gen_candidates	build/lib/dsb3/params.py	/^gen_candidates = OrderedDict([$/;"	v
gen_candidates	dsb3/params.py	/^gen_candidates = OrderedDict([$/;"	v
gen_candidates	params_alex.py	/^gen_candidates = OrderedDict([$/;"	v
gen_candidates	params_juler.py	/^gen_candidates = OrderedDict([$/;"	v
gen_candidates_eval	dsb3/params.py	/^gen_candidates_eval = OrderedDict([$/;"	v
gen_candidates_eval	params_alex.py	/^gen_candidates_eval = OrderedDict([$/;"	v
gen_candidates_eval	params_juler.py	/^gen_candidates_eval = OrderedDict([$/;"	v
gen_candidates_json	dsb3/steps/gen_candidates_eval.py	/^gen_candidates_json = None$/;"	v
gen_candidates_params	dsb3/steps/gen_candidates_eval.py	/^gen_candidates_params = None$/;"	v
gen_candidates_vis	dsb3/params.py	/^gen_candidates_vis = OrderedDict([$/;"	v
gen_candidates_vis	params_alex.py	/^gen_candidates_vis = OrderedDict([$/;"	v
gen_candidates_vis	params_juler.py	/^gen_candidates_vis = OrderedDict([$/;"	v
gen_data	dsb3/steps/interpolate_candidates.py	/^def gen_data(lst_type,$/;"	f
gen_nodule_masks	build/lib/dsb3/params.py	/^gen_nodule_masks = OrderedDict([$/;"	v
gen_nodule_masks	dsb3/params.py	/^gen_nodule_masks = OrderedDict([$/;"	v
gen_nodule_masks	params_alex.py	/^gen_nodule_masks = OrderedDict([$/;"	v
gen_nodule_masks	params_juler.py	/^gen_nodule_masks = OrderedDict([$/;"	v
gen_nodule_masks_json	dsb3/steps/gen_candidates_eval.py	/^gen_nodule_masks_json = None$/;"	v
gen_nodule_seg	build/lib/dsb3/params.py	/^gen_nodule_seg = OrderedDict([$/;"	v
gen_nodule_seg	params_alex.py	/^gen_nodule_seg = OrderedDict([$/;"	v
gen_nodule_seg_data	dsb3/params.py	/^gen_nodule_seg_data = OrderedDict([$/;"	v
gen_nodule_seg_data	params_juler.py	/^gen_nodule_seg_data = OrderedDict([$/;"	v
gen_patients_candidates	dsb3/steps/interpolate_candidates.py	/^def gen_patients_candidates(line_num,$/;"	f
gen_prob_maps	build/lib/dsb3/params.py	/^gen_prob_maps = OrderedDict([$/;"	v
gen_prob_maps	dsb3/params.py	/^gen_prob_maps = OrderedDict([$/;"	v
gen_prob_maps	params_alex.py	/^gen_prob_maps = OrderedDict([$/;"	v
gen_prob_maps	params_juler.py	/^gen_prob_maps = OrderedDict([$/;"	v
gen_submission	build/lib/dsb3/params.py	/^gen_submission = OrderedDict([$/;"	v
gen_submission	dsb3/params.py	/^gen_submission = OrderedDict([$/;"	v
gen_submission	params_alex.py	/^gen_submission = OrderedDict([$/;"	v
gen_submission	params_juler.py	/^gen_submission = OrderedDict([$/;"	v
generate_data_lsts	dsb3/steps/gen_nodule_seg_data.py	/^def generate_data_lsts(HU_tissue_range,$/;"	f
getEllipsoidVolume	dsb3/utils/ellipse_helpers.py	/^def getEllipsoidVolume(radii):$/;"	f
getMinVolEllipse	dsb3/utils/ellipse_helpers.py	/^def getMinVolEllipse(P=None, tolerance=0.01, v_center_px=[], v_diam_px=[]):$/;"	f
get_bounding_box	build/lib/dsb3/steps/gen_nodule_masks.py	/^def get_bounding_box(array):$/;"	f
get_bounding_box	dsb3/steps/gen_nodule_masks.py	/^def get_bounding_box(array):$/;"	f
get_candidates_array	build/lib/dsb3/steps/gen_candidates.py	/^def get_candidates_array(clusters, array, array_name, cube_shape, threshold_prob_map=0.05):$/;"	f
get_candidates_box_coords	build/lib/dsb3/steps/gen_candidates.py	/^def get_candidates_box_coords(clusters, cube_shape, total_shape, padding=True):$/;"	f
get_cluster_box_coords	dsb3/steps/gen_candidates.py	/^def get_cluster_box_coords(cluster_center, cube_shape):$/;"	f
get_clusters_array	dsb3/steps/gen_candidates.py	/^def get_clusters_array(clusters, cube_shape, array, array_name):$/;"	f
get_clusters_box_coords	dsb3/steps/gen_candidates.py	/^def get_clusters_box_coords(clusters, cube_shape):$/;"	f
get_crop_idx_yx	build/lib/dsb3/steps/resample_lungs.py	/^def get_crop_idx_yx(pred, crop_coords, invers_scale_yx):$/;"	f
get_crop_idx_yx	dsb3/steps/resample_lungs.py	/^def get_crop_idx_yx(pred, crop_coords, invers_scale_yx):$/;"	f
get_cropped_basename_without_ext_and_last_element	dsb3/visualize/__init__.py	/^def get_cropped_basename_without_ext_and_last_element(filename):$/;"	f
get_filenames_sorted_by_the_last_element_of_basename	dsb3/visualize/__init__.py	/^def get_filenames_sorted_by_the_last_element_of_basename(directory):$/;"	f
get_global_rank	dsb3/steps/gen_candidates_eval.py	/^def get_global_rank(sort_candidates_by, patient_json):$/;"	f
get_img_array_dcom	build/lib/dsb3/steps/resample_lungs.py	/^def get_img_array_dcom(img_file):$/;"	f
get_img_array_dcom	dsb3/steps/resample_lungs.py	/^def get_img_array_dcom(img_file):$/;"	f
get_img_array_mhd	build/lib/dsb3/steps/resample_lungs.py	/^def get_img_array_mhd(img_file):$/;"	f
get_img_array_mhd	dsb3/steps/resample_lungs.py	/^def get_img_array_mhd(img_file):$/;"	f
get_pixels_hu	build/lib/dsb3/steps/resample_lungs.py	/^    def get_pixels_hu(slices):$/;"	f	function:get_img_array_dcom
get_pixels_hu	dsb3/steps/resample_lungs.py	/^    def get_pixels_hu(slices):$/;"	f	function:get_img_array_dcom
get_pre_normed_value_hist	build/lib/dsb3/steps/resample_lungs.py	/^def get_pre_normed_value_hist(img_array):$/;"	f
get_pre_normed_value_hist	dsb3/steps/resample_lungs.py	/^def get_pre_normed_value_hist(img_array):$/;"	f
get_slice_from_zyx_array	dsb3/steps/gen_nodule_seg_data.py	/^def get_slice_from_zyx_array(array, slice_start, slice_end, axis):$/;"	f
get_step_dir	build/lib/dsb3/pipeline.py	/^def get_step_dir(step_name=None, run=None):$/;"	f
get_step_dir	dsb3/pipeline.py	/^def get_step_dir(step_name=None, run=None):$/;"	f
get_write_dir	build/lib/dsb3/pipeline.py	/^def get_write_dir(run=None):$/;"	f
get_write_dir	dsb3/pipeline.py	/^def get_write_dir(run=None):$/;"	f
indent	dsb3/hrjson/__init__.py	/^    indent=None,$/;"	v
init_pipeline	build/lib/dsb3/__init__.py	/^def init_pipeline(dataset_name,$/;"	f
init_pipeline	dsb3/__init__.py	/^def init_pipeline(run,$/;"	f
interpolate_array	dsb3/steps/resample_lungs.py	/^def interpolate_array(array, resize_factor, order=3):$/;"	f
interpolate_candidates	build/lib/dsb3/params.py	/^interpolate_candidates = OrderedDict([$/;"	v
interpolate_candidates	dsb3/params.py	/^interpolate_candidates = OrderedDict([$/;"	v
interpolate_candidates	params_alex.py	/^interpolate_candidates = OrderedDict([$/;"	v
interpolate_candidates	params_juler.py	/^interpolate_candidates = OrderedDict([$/;"	v
is_contained	build/lib/dsb3/steps/gen_candidates.py	/^def is_contained(center_1, center_2, cube_shape, max_dist_fraction=0.5):$/;"	f
is_contained	dsb3/steps/gen_candidates.py	/^def is_contained(center_1, center_2, cube_shape, max_dist_fraction=0.5):$/;"	f
item_separator	dsb3/hrjson/encoder.py	/^    item_separator = ', '$/;"	v	class:JSONEncoder
iterencode	dsb3/hrjson/encoder.py	/^    def iterencode(self, o, _one_shot=False):$/;"	m	class:JSONEncoder
key_separator	dsb3/hrjson/encoder.py	/^    key_separator = ': '$/;"	v	class:JSONEncoder
linecol	dsb3/hrjson/decoder.py	/^def linecol(doc, pos):$/;"	f
load	dsb3/hrjson/__init__.py	/^def load(fp, cls=None, object_hook=None, parse_float=None,$/;"	f
load_array	build/lib/dsb3/pipeline.py	/^def load_array(basename, step_name=None):$/;"	f
load_array	dsb3/pipeline.py	/^def load_array(basename, step_name=None):$/;"	f
load_json	build/lib/dsb3/pipeline.py	/^def load_json(step_name=None):$/;"	f
load_json	dsb3/pipeline.py	/^def load_json(basename, step_name=None):$/;"	f
load_network	build/lib/dsb3/tf_tools.py	/^def load_network(checkpoint_dir, image_shape=None, reuse=None):$/;"	f
load_network	dsb3/tf_tools.py	/^def load_network(checkpoint_dir, image_shape=None, reuse=None, batch_size=None):$/;"	f
load_scan	build/lib/dsb3/steps/resample_lungs.py	/^    def load_scan(path):$/;"	f	function:get_img_array_dcom
load_scan	dsb3/steps/resample_lungs.py	/^    def load_scan(path):$/;"	f	function:get_img_array_dcom
loads	dsb3/hrjson/__init__.py	/^def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None,$/;"	f
log	build/lib/dsb3/pipeline.py	/^log = log_step # just a convenience name for authors of step modules$/;"	v
log	dsb3/pipeline.py	/^log = log_step # just a convenience name for authors of step modules$/;"	v
log_pipe	build/lib/dsb3/pipeline.py	/^log_pipe = None$/;"	v
log_pipe	dsb3/pipeline.py	/^log_pipe = None$/;"	v
log_step	build/lib/dsb3/pipeline.py	/^log_step = None$/;"	v
log_step	dsb3/pipeline.py	/^log_step = None$/;"	v
log_tf	build/lib/dsb3/pipeline.py	/^log_tf = None$/;"	v
log_tf	dsb3/pipeline.py	/^log_tf = None$/;"	v
logloss	dsb3/steps/filter_candidates.py	/^    def logloss(self, prediction, label):$/;"	m	class:score_nodules
logloss	dsb3/steps/gen_submission.py	/^def logloss(prediction, label):$/;"	f
main	build/lib/dsb3/__main__.py	/^def main():$/;"	f
main	dsb3/__main__.py	/^def main():$/;"	f
main	dsb3/hrjson/tool.py	/^def main():$/;"	f
make_nodule	build/lib/dsb3/steps/gen_nodule_masks.py	/^def make_nodule(patient, nodule_annotations,$/;"	f
make_nodule	dsb3/steps/gen_nodule_masks.py	/^def make_nodule(patient, nodule_annotations,$/;"	f
make_scanner	dsb3/hrjson/scanner.py	/^make_scanner = c_make_scanner or py_make_scanner$/;"	v
msg	build/lib/dsb3/pipeline.py	/^    msg  = '%(msg)s'$/;"	v	class:LogFormatter
n_CPUs	build/lib/dsb3/pipeline.py	/^n_CPUs = 1$/;"	v
n_CPUs	dsb3/pipeline.py	/^n_CPUs = 1$/;"	v
n_patients	build/lib/dsb3/pipeline.py	/^n_patients = None$/;"	v
n_patients	dsb3/pipeline.py	/^n_patients = None$/;"	v
name	setup.py	/^    name='dsb3',$/;"	v
normalize_HU_range_float	build/lib/dsb3/steps/resample_lungs.py	/^def normalize_HU_range_float(img_array, HU_tissue_range):$/;"	f
normalize_HU_range_float	dsb3/steps/resample_lungs.py	/^def normalize_HU_range_float(img_array, HU_tissue_range):$/;"	f
packages	setup.py	/^    packages=[$/;"	v
patients	build/lib/dsb3/pipeline.py	/^patients = None$/;"	v
patients	dsb3/pipeline.py	/^patients = None$/;"	v
patients_by_label	dsb3/pipeline.py	/^patients_by_label = None$/;"	v
patients_by_split	dsb3/pipeline.py	/^patients_by_split = None$/;"	v
patients_label	dsb3/pipeline.py	/^patients_label = None$/;"	v
patients_raw_data_path	build/lib/dsb3/pipeline.py	/^patients_raw_data_path = None$/;"	v
patients_raw_data_path	dsb3/pipeline.py	/^patients_raw_data_path = None$/;"	v
pipe	build/lib/dsb3/params.py	/^pipe = OrderedDict([$/;"	v
pipe	dsb3/params.py	/^pipe = OrderedDict([$/;"	v
pipe	params_alex.py	/^pipe = OrderedDict([$/;"	v
pipe	params_juler.py	/^pipe = OrderedDict([$/;"	v
plot	build/lib/dsb3/steps/gen_nodule_masks.py	/^def plot(mask, image):$/;"	f
plot	dsb3/steps/gen_nodule_masks.py	/^def plot(mask, image):$/;"	f
plotEllipsoid	dsb3/utils/ellipse_helpers.py	/^def plotEllipsoid(center, radii, rotation, ax=None, plotAxes=False, cageColor='b', cageAlpha=0.2):$/;"	f
plot__both_scatters	dsb3/utils/ellipse_helpers.py	/^def plot__both_scatters(new, old):$/;"	f
plot__ellipse	dsb3/utils/ellipse_helpers.py	/^def plot__ellipse(P):$/;"	f
plot__scatter	dsb3/utils/ellipse_helpers.py	/^def plot__scatter(P):$/;"	f
plot_img_2d_slice	dsb3/steps/gen_candidates_vis.py	/^def plot_img_2d_slice(array_zyx):$/;"	f
plot_nodule_prob_map_img	dsb3/steps/gen_candidates_vis.py	/^def plot_nodule_prob_map_img(nod_prob_map, nod_prob_map_thresh, nod_img_array):$/;"	f
predict_score	dsb3/steps/filter_candidates.py	/^    def predict_score(self, candidate, lab=None):$/;"	m	class:score_nodules
predict_score	dsb3/steps/gen_submission.py	/^    def predict_score(self, candidates, lab=None):$/;"	m	class:cancer_score
process_junk	build/lib/dsb3/steps/resample_lungs.py	/^def process_junk(patients_junk, tf_net,$/;"	f
process_junk	dsb3/steps/resample_lungs.py	/^def process_junk(junk_cnt, patients_junk, tf_net,$/;"	f
process_nodule_patient	build/lib/dsb3/steps/gen_nodule_masks.py	/^def process_nodule_patient(patient, annotations, resample_lungs_dict, $/;"	f
process_nodule_patient	dsb3/steps/gen_nodule_masks.py	/^def process_nodule_patient(patient, annotations, resample_lungs_json, $/;"	f
process_patient	build/lib/dsb3/steps/gen_candidates.py	/^def process_patient(patient, max_n_candidates_per_patient, resample_lungs_dict, gen_prob_maps_dict, label_info):$/;"	f
process_patient	build/lib/dsb3/steps/resample_lungs.py	/^def process_patient(patient, target_spacing_zyx, data_type):$/;"	f
process_patient	dsb3/steps/gen_candidates.py	/^def process_patient(patient,$/;"	f
process_patient	dsb3/steps/resample_lungs.py	/^def process_patient(patient, new_spacing_zyx, data_type):$/;"	f
py_encode_basestring_ascii	dsb3/hrjson/encoder.py	/^def py_encode_basestring_ascii(s):$/;"	f
py_make_scanner	dsb3/hrjson/scanner.py	/^def py_make_scanner(context):$/;"	f
py_scanstring	dsb3/hrjson/decoder.py	/^def py_scanstring(s, end, strict=True,$/;"	f
raw_data_dir	build/lib/dsb3/pipeline.py	/^raw_data_dir = None$/;"	v
raw_data_dir	dsb3/pipeline.py	/^raw_data_dir = None$/;"	v
raw_decode	dsb3/hrjson/decoder.py	/^    def raw_decode(self, s, idx=0):$/;"	m	class:JSONDecoder
redirect_stdout	build/lib/dsb3/tf_tools.py	/^def redirect_stdout(to=pipe.log_tf):$/;"	f
redirect_stdout	dsb3/tf_tools.py	/^def redirect_stdout(to=pipe.log_tf):$/;"	f
remove_masks_from_clusters	build/lib/dsb3/steps/gen_candidates.py	/^def remove_masks_from_clusters(clusters):$/;"	f
remove_masks_from_clusters	dsb3/steps/gen_candidates.py	/^def remove_masks_from_clusters(clusters):$/;"	f
remove_redundant_clusters	build/lib/dsb3/steps/gen_candidates.py	/^def remove_redundant_clusters(clusters, cube_shape):$/;"	f
remove_redundant_clusters	dsb3/steps/gen_candidates.py	/^def remove_redundant_clusters(clusters, cube_shape):$/;"	f
remove_redundant_clusters_compare_with_one	build/lib/dsb3/steps/gen_candidates.py	/^def remove_redundant_clusters_compare_with_one(clusters, clu, cube_shape):$/;"	f
remove_redundant_clusters_compare_with_one	dsb3/steps/gen_candidates.py	/^def remove_redundant_clusters_compare_with_one(clusters, clu, cube_shape):$/;"	f
replace	dsb3/hrjson/encoder.py	/^    def replace(match):$/;"	f	function:encode_basestring
replace	dsb3/hrjson/encoder.py	/^    def replace(match):$/;"	f	function:py_encode_basestring_ascii
resample_lungs	build/lib/dsb3/params.py	/^resample_lungs = OrderedDict([$/;"	v
resample_lungs	dsb3/params.py	/^resample_lungs = OrderedDict([$/;"	v
resample_lungs	params_alex.py	/^resample_lungs = OrderedDict([$/;"	v
resample_lungs	params_juler.py	/^resample_lungs = OrderedDict([$/;"	v
resize_and_interpolate_array	dsb3/steps/resample_lungs.py	/^def resize_and_interpolate_array(img_array, old_spacing, new_spacing, order=3):$/;"	f
rotate	build/lib/dsb3/steps/gen_prob_maps.py	/^def rotate(in_tensor, M):$/;"	f
rotate	dsb3/steps/gen_prob_maps.py	/^def rotate(in_tensor, M):$/;"	f
rotate_3d	build/lib/dsb3/steps/gen_prob_maps.py	/^def rotate_3d(tensor, M, axis):$/;"	f
rotate_3d	dsb3/steps/gen_prob_maps.py	/^def rotate_3d(tensor, M, axis):$/;"	f
run	build/lib/dsb3/steps/gen_candidates.py	/^def run(max_n_candidates_per_patient,$/;"	f
run	build/lib/dsb3/steps/gen_nodule_masks.py	/^def run(LUNA16_annotations_csv_path,$/;"	f
run	build/lib/dsb3/steps/gen_prob_maps.py	/^def run(data_type,$/;"	f
run	build/lib/dsb3/steps/resample_lungs.py	/^def run(target_spacing_zyx,$/;"	f
run	dsb3/steps/filter_candidates.py	/^def run(num_augs_per_img,$/;"	f
run	dsb3/steps/gen_candidates.py	/^def run(n_candidates,$/;"	f
run	dsb3/steps/gen_candidates_eval.py	/^def run(max_n_candidates=20, max_dist_fraction=0.5, priority_threshold=3, $/;"	f
run	dsb3/steps/gen_candidates_vis.py	/^def run(inspect_what='false_negatives'):$/;"	f
run	dsb3/steps/gen_nodule_masks.py	/^def run(LUNA16_annotations_csv_path,$/;"	f
run	dsb3/steps/gen_nodule_seg_data.py	/^def run(view_angles,$/;"	f
run	dsb3/steps/gen_prob_maps.py	/^def run(data_type,$/;"	f
run	dsb3/steps/gen_submission.py	/^def run(splitting,$/;"	f
run	dsb3/steps/interpolate_candidates.py	/^def run(n_candidates,$/;"	f
run	dsb3/steps/resample_lungs.py	/^def run(new_spacing_zyx,$/;"	f
runs_descr	build/lib/dsb3/__main__.py	/^def runs_descr():$/;"	f
runs_descr	dsb3/__main__.py	/^def runs_descr():$/;"	f
save_array	build/lib/dsb3/pipeline.py	/^def save_array(basename, array, step_name=None):$/;"	f
save_array	dsb3/pipeline.py	/^def save_array(basename, array, step_name=None):$/;"	f
save_json	build/lib/dsb3/pipeline.py	/^def save_json(d, step_name=None, mode='a'):$/;"	f
save_json	dsb3/pipeline.py	/^def save_json(basename, dictionary, step_name=None, mode='w'):$/;"	f
scan_once	dsb3/hrjson/scanner.py	/^    def scan_once(string, idx):$/;"	f	function:py_make_scanner
scanstring	dsb3/hrjson/decoder.py	/^scanstring = c_scanstring or py_scanstring$/;"	v
score_nodules	dsb3/steps/filter_candidates.py	/^class score_nodules():$/;"	c
seg_postprocessing	build/lib/dsb3/steps/resample_lungs.py	/^def seg_postprocessing(prediction):$/;"	f
seg_postprocessing	dsb3/steps/resample_lungs.py	/^def seg_postprocessing(prediction):$/;"	f
seg_preprocessing	build/lib/dsb3/steps/resample_lungs.py	/^def seg_preprocessing(img_array_zyx, config, scale_yx, HU_tissue_range):$/;"	f
seg_preprocessing	dsb3/steps/resample_lungs.py	/^def seg_preprocessing(img_array_zyx, config, scale_yx, HU_tissue_range):$/;"	f
separators	dsb3/hrjson/__init__.py	/^    separators=None,$/;"	v
skipkeys	dsb3/hrjson/__init__.py	/^    skipkeys=False,$/;"	v
sort_clusters	build/lib/dsb3/steps/gen_candidates.py	/^def sort_clusters(clusters, key='prob_sum_cluster'):$/;"	f
sort_clusters	dsb3/steps/gen_candidates.py	/^def sort_clusters(clusters, key='prob_sum_cluster'):$/;"	f
sort_clusters_by	dsb3/steps/gen_candidates.py	/^sort_clusters_by = 'prob_sum_min_nodule_size'$/;"	v
split_clusters	build/lib/dsb3/steps/gen_candidates.py	/^def split_clusters(clusters, cube_shape, total_shape,$/;"	f
split_clusters	dsb3/steps/gen_candidates.py	/^def split_clusters(clusters, cube_shape, total_shape, dbscan_args=None, threshold=0.05, check=False):$/;"	f
steps_descr	build/lib/dsb3/__main__.py	/^def steps_descr():$/;"	f
steps_descr	dsb3/__main__.py	/^def steps_descr():$/;"	f
version	setup.py	/^    version='0.1',$/;"	v
write_basedir	build/lib/dsb3/pipeline.py	/^write_basedir = None$/;"	v
write_basedir	dsb3/pipeline.py	/^write_basedir = None$/;"	v
write_col_img_info	dsb3/visualize/__init__.py	/^def write_col_img_info(f, row_idx, sorted_filenames_dict):$/;"	f
write_col_img_inludes	dsb3/visualize/__init__.py	/^def write_col_img_inludes(f, row_idx, sorted_filenames_dict):$/;"	f
write_col_names	dsb3/visualize/__init__.py	/^def write_col_names(f, col_names):$/;"	f
write_figs_overview_html	dsb3/visualize/__init__.py	/^def write_figs_overview_html(figs_directory, show_image_info=True):$/;"	f
zero_center	build/lib/dsb3/steps/resample_lungs.py	/^def zero_center(img_array):$/;"	f
zero_center	dsb3/steps/resample_lungs.py	/^def zero_center(img_array):$/;"	f
